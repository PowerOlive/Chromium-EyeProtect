From 9f7488bbcc0da7ff397a853f6ccee58b692c1a28 Mon Sep 17 00:00:00 2001
From: fengberd <admin@berd.moe>
Date: Wed, 22 Apr 2020 12:02:05 +0800
Subject: [PATCH 3/6] [Eye Protect] Location Bar

---
 chrome/browser/themes/theme_helper.cc         |  18 +++
 chrome/browser/themes/theme_properties.cc     |   7 +
 chrome/browser/ui/BUILD.gn                    |   1 +
 chrome/browser/ui/layout_constants.cc         |  17 +++
 .../ui/views/location_bar/background_ep.cc    | 135 ++++++++++++++++++
 .../location_bar/icon_label_bubble_view.cc    |   9 +-
 .../views/location_bar/location_bar_view.cc   |  27 +++-
 7 files changed, 208 insertions(+), 6 deletions(-)
 create mode 100644 chrome/browser/ui/views/location_bar/background_ep.cc

diff --git a/chrome/browser/themes/theme_helper.cc b/chrome/browser/themes/theme_helper.cc
index a501761d8972..62c7e2c44d7a 100644
--- a/chrome/browser/themes/theme_helper.cc
+++ b/chrome/browser/themes/theme_helper.cc
@@ -17,6 +17,9 @@
 #include "ui/native_theme/common_theme.h"
 #include "ui/native_theme/native_theme.h"
 
+#include "ui/base/material_design/material_design_controller.h"
+using MD = ui::MaterialDesignController;
+
 namespace {
 
 using TP = ThemeProperties;
@@ -241,6 +244,11 @@ SkColor ThemeHelper::GetDefaultColor(
       // TODO(http://crbug.com/878664): Enable for all cases.
       if (!IsCustomTheme(theme_supplier))
         break;
+      if (MD::eye_protection()) {
+        return ui::NativeTheme::GetInstanceForNativeUi()->GetSystemColor(
+            ui::NativeTheme::kColorId_TextfieldDefaultBackground,
+            ui::NativeTheme::ColorScheme::kLight);
+      }
       constexpr float kMinOmniboxToolbarContrast = 1.3f;
       const SkColor toolbar_color =
           GetColor(TP::COLOR_TOOLBAR, incognito, theme_supplier);
@@ -541,6 +549,16 @@ base::Optional<ThemeHelper::OmniboxColor> ThemeHelper::GetOmniboxColorImpl(
   const auto blend_with_clamped_contrast = [&](OmniboxColor bg) {
     return blend_for_min_contrast(fg, fg, blend_for_min_contrast(bg, bg));
   };
+  if (MD::eye_protection() && !dark) {
+    switch (id) {
+      case TP::COLOR_OMNIBOX_SECURITY_CHIP_DEFAULT:
+        return security_chip_color({gfx::kGoogleGrey800, false});
+      case TP::COLOR_OMNIBOX_SECURITY_CHIP_SECURE:
+        return security_chip_color({gfx::kGoogleGreen600, false});
+      case TP::COLOR_OMNIBOX_SECURITY_CHIP_DANGEROUS:
+        return security_chip_color({gfx::kGoogleRed600, false});
+    }
+  }
   switch (id) {
     case TP::COLOR_OMNIBOX_TEXT:
     case TP::COLOR_OMNIBOX_RESULTS_TEXT_SELECTED:
diff --git a/chrome/browser/themes/theme_properties.cc b/chrome/browser/themes/theme_properties.cc
index a26b17cc6d47..cd18bbdb198c 100644
--- a/chrome/browser/themes/theme_properties.cc
+++ b/chrome/browser/themes/theme_properties.cc
@@ -305,6 +305,13 @@ SkColor ThemeProperties::GetDefaultColor(int id,
     // Don't modify GetIncognitoColor, which would make further maintaince
     // harder.
     switch (id) {
+      case COLOR_OMNIBOX_BACKGROUND:
+      case COLOR_OMNIBOX_BACKGROUND_HOVERED:
+        if (kindOfDark)
+          break;
+        return ui::NativeTheme::GetInstanceForNativeUi()->GetSystemColor(
+            ui::NativeTheme::kColorId_TextfieldDefaultBackground,
+            ui::NativeTheme::ColorScheme::kLight);
       case COLOR_FRAME:
         return kindOfDark ? SkColorSetRGB(0x28, 0x2B, 0x2D)
                           : SkColorSetRGB(0xCC, 0xCC, 0xCC);
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
index 5c5b696b049c..912ca2e7b1e3 100644
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -3383,6 +3383,7 @@ jumbo_static_library("ui") {
       "webauthn/sheet_models.h",
       "webauthn/transport_hover_list_model.cc",
       "webauthn/transport_hover_list_model.h",
+      "views/location_bar/background_ep.cc",
       "webauthn/transport_utils.cc",
       "webauthn/transport_utils.h",
     ]
diff --git a/chrome/browser/ui/layout_constants.cc b/chrome/browser/ui/layout_constants.cc
index 3714e422c876..d68995dea165 100644
--- a/chrome/browser/ui/layout_constants.cc
+++ b/chrome/browser/ui/layout_constants.cc
@@ -48,6 +48,12 @@ int GetLayoutConstant(LayoutConstant constant) {
         return touch_ui ? 4 : 6;
       case TABSTRIP_TOOLBAR_OVERLAP:
         return 0;
+      case LOCATION_BAR_BUBBLE_FONT_VERTICAL_PADDING:
+        return 2;
+      case LOCATION_BAR_BUBBLE_ANCHOR_VERTICAL_INSET:
+        return 6;
+      case LOCATION_BAR_ELEMENT_PADDING:
+        return touch_ui ? 3 : 1;
       default:
         break;
     }
@@ -110,6 +116,17 @@ int GetLayoutConstant(LayoutConstant constant) {
 
 gfx::Insets GetLayoutInsets(LayoutInset inset) {
   const bool touch_ui = ui::MaterialDesignController::touch_ui();
+  if (ui::MaterialDesignController::eye_protection()) {
+    // Easier to merge if we write like that
+    switch (inset) {
+      case LOCATION_BAR_ICON_INTERIOR_PADDING:
+        return touch_ui ? gfx::Insets(5) : gfx::Insets(4);
+      case TOOLBAR_ACTION_VIEW:
+        return gfx::Insets(touch_ui ? 10 : 2);
+      default:
+        break;
+    }
+  }
   switch (inset) {
     case LOCATION_BAR_ICON_INTERIOR_PADDING:
       return touch_ui ? gfx::Insets(5, 10) : gfx::Insets(4, 8);
diff --git a/chrome/browser/ui/views/location_bar/background_ep.cc b/chrome/browser/ui/views/location_bar/background_ep.cc
new file mode 100644
index 000000000000..c294cc73320c
--- /dev/null
+++ b/chrome/browser/ui/views/location_bar/background_ep.cc
@@ -0,0 +1,135 @@
+// Copyright 2015 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+#include "base/macros.h"
+#include "third_party/skia/include/core/SkBlendMode.h"
+#include "third_party/skia/include/core/SkColor.h"
+#include "ui/views/background.h"
+
+namespace gfx {
+class Canvas;
+}
+
+namespace views {
+class View;
+}
+
+// BackgroundWith1PxBorder renders a solid background color, with a one pixel
+// border with rounded corners. This accounts for the scaling of the canvas, so
+// that the border is one pixel regardless of display scaling.
+// TODO(patricialor): Delete this & replace with CreateRoundRectWith1PxPainter.
+class BackgroundWith1PxBorder : public views::Background {
+ public:
+  // The thickness of the border in DIP.
+  static constexpr int kBorderThicknessDip = 1;
+
+  // The legacy (non touch/material) border radius.
+  static constexpr int kLegacyBorderRadiusPx = 2;
+
+  BackgroundWith1PxBorder(SkColor background, SkColor border);
+
+  void set_blend_mode(SkBlendMode blend_mode) { blend_mode_ = blend_mode; }
+
+  // Paints a blue focus ring that draws over the top of the existing border.
+  void PaintFocusRing(gfx::Canvas* canvas,
+                      ui::NativeTheme* theme,
+                      const gfx::Rect& local_bounds);
+
+  // views::Background:
+  void Paint(gfx::Canvas* canvas, views::View* view) const override;
+
+ protected:
+  // Returns the amount of border radius to use for the inside edge of the
+  // border stroke for this background.
+  float GetBorderRadius(int height_in_px) const;
+
+  // Paints the background. |inner_border_radius| is the border radius of the
+  // inside of the stroke.
+  void Paint(gfx::Canvas* canvas,
+             SkColor background,
+             SkColor border,
+             float inner_border_radius,
+             const gfx::Rect& bounds) const;
+
+ private:
+  // Color for the one pixel border.
+  SkColor border_color_;
+
+  // Blend mode used when painting.
+  SkBlendMode blend_mode_ = SkBlendMode::kSrcOver;
+
+  DISALLOW_COPY_AND_ASSIGN(BackgroundWith1PxBorder);
+};
+
+#include "cc/paint/paint_flags.h"
+#include "chrome/browser/ui/views/location_bar/location_bar_view.h"
+#include "third_party/skia/include/core/SkPath.h"
+#include "third_party/skia/include/pathops/SkPathOps.h"
+#include "ui/base/material_design/material_design_controller.h"
+#include "ui/gfx/canvas.h"
+#include "ui/gfx/scoped_canvas.h"
+#include "ui/views/view.h"
+#include "ui/views/widget/widget.h"
+
+BackgroundWith1PxBorder::BackgroundWith1PxBorder(SkColor background,
+                                                 SkColor border)
+    : border_color_(border) {
+  SetNativeControlColor(background);
+}
+
+void BackgroundWith1PxBorder::PaintFocusRing(gfx::Canvas* canvas,
+                                             ui::NativeTheme* theme,
+                                             const gfx::Rect& local_bounds) {
+  SkColor focus_ring_color = theme->GetSystemColor(
+      ui::NativeTheme::NativeTheme::kColorId_FocusedBorderColor);
+  Paint(canvas, SK_ColorTRANSPARENT, focus_ring_color,
+        GetBorderRadius(local_bounds.height() * canvas->image_scale()),
+        local_bounds);
+}
+
+void BackgroundWith1PxBorder::Paint(gfx::Canvas* canvas,
+                                    views::View* view) const {
+  Paint(canvas, get_color(), border_color_,
+        GetBorderRadius(view->height() * canvas->image_scale()),
+        view->GetContentsBounds());
+}
+
+float BackgroundWith1PxBorder::GetBorderRadius(int height_in_px) const {
+  return kLegacyBorderRadiusPx;
+}
+
+void BackgroundWith1PxBorder::Paint(gfx::Canvas* canvas,
+                                    SkColor background,
+                                    SkColor border,
+                                    float inner_border_radius,
+                                    const gfx::Rect& bounds) const {
+  gfx::ScopedCanvas scoped_canvas(canvas);
+  const float scale = canvas->UndoDeviceScaleFactor();
+  gfx::RectF border_rect_f(bounds);
+  border_rect_f.Scale(scale);
+
+  // Inset by |kBorderThicknessDip|, then draw the border along the outside edge
+  // of the result. Make sure the inset amount is a whole number so the border
+  // will still be aligned to the pixel grid. std::floor is chosen here to
+  // ensure the border will be fully contained within the |kBorderThicknessDip|
+  // region.
+  border_rect_f.Inset(gfx::InsetsF(std::floor(kBorderThicknessDip * scale)));
+
+  SkRRect inner_rect(SkRRect::MakeRectXY(gfx::RectFToSkRect(border_rect_f),
+                                         inner_border_radius,
+                                         inner_border_radius));
+  SkRRect outer_rect(inner_rect);
+  // The border is 1px thick regardless of scale factor, so hard code that here.
+  outer_rect.outset(1, 1);
+
+  cc::PaintFlags flags;
+  flags.setBlendMode(blend_mode_);
+  flags.setAntiAlias(true);
+  flags.setStyle(cc::PaintFlags::kFill_Style);
+
+  flags.setColor(border);
+  canvas->sk_canvas()->drawDRRect(outer_rect, inner_rect, flags);
+
+  flags.setColor(background);
+  canvas->sk_canvas()->drawRRect(inner_rect, flags);
+}
diff --git a/chrome/browser/ui/views/location_bar/icon_label_bubble_view.cc b/chrome/browser/ui/views/location_bar/icon_label_bubble_view.cc
index 846d35deea1c..2ee922a06c94 100644
--- a/chrome/browser/ui/views/location_bar/icon_label_bubble_view.cc
+++ b/chrome/browser/ui/views/location_bar/icon_label_bubble_view.cc
@@ -426,6 +426,12 @@ gfx::Size IconLabelBubbleView::GetSizeForLabelWidth(int label_width) const {
 int IconLabelBubbleView::GetInternalSpacing() const {
   if (image()->GetPreferredSize().IsEmpty())
     return 0;
+  if (MD::eye_protection()) {
+    return MD::touch_ui()
+               ? 4
+               : GetLayoutConstant(LOCATION_BAR_ELEMENT_PADDING) +
+                     GetLayoutInsets(LOCATION_BAR_ICON_INTERIOR_PADDING).left();
+  }
   return (MD::touch_ui() ? 10 : 8) + GetExtraInternalSpacing();
 }
 
@@ -557,7 +563,8 @@ SkPath IconLabelBubbleView::GetHighlightPath() const {
     highlight_bounds.Inset(0, 0, GetEndPaddingWithSeparator(), 0);
   highlight_bounds = GetMirroredRect(highlight_bounds);
 
-  const float corner_radius = highlight_bounds.height() / 2.f;
+  const float corner_radius =
+      MD::eye_protection() ? 2.f : highlight_bounds.height() / 2.f;
   const SkRect rect = RectToSkRect(highlight_bounds);
 
   return SkPath().addRoundRect(rect, corner_radius, corner_radius);
diff --git a/chrome/browser/ui/views/location_bar/location_bar_view.cc b/chrome/browser/ui/views/location_bar/location_bar_view.cc
index 5f0a38eea3e3..cb50bd1da63b 100644
--- a/chrome/browser/ui/views/location_bar/location_bar_view.cc
+++ b/chrome/browser/ui/views/location_bar/location_bar_view.cc
@@ -122,6 +122,9 @@
 #include "ui/views/controls/label.h"
 #include "ui/views/widget/widget.h"
 
+#include "chrome/browser/ui/views/location_bar/background_ep.cc"
+using MD = ui::MaterialDesignController;
+
 namespace {
 
 int IncrementalMinimumWidth(const views::View* view) {
@@ -150,7 +153,7 @@ LocationBarView::LocationBarView(Browser* browser,
       profile_(profile),
       delegate_(delegate),
       is_popup_mode_(is_popup_mode) {
-  if (!is_popup_mode_) {
+  if (!MD::eye_protection() && !is_popup_mode_) {
     focus_ring_ = views::FocusRing::Install(this);
     focus_ring_->SetHasFocusPredicate([](View* view) -> bool {
       DCHECK_EQ(view->GetClassName(), LocationBarView::kViewClassName);
@@ -316,6 +319,8 @@ SkColor LocationBarView::GetOpaqueBorderColor() const {
 }
 
 int LocationBarView::GetBorderRadius() const {
+  if (MD::eye_protection())
+    return MD::touch_ui() ? 8 : 2;
   return ChromeLayoutProvider::Get()->GetCornerRadiusMetric(
       views::EMPHASIS_MAXIMUM, size());
 }
@@ -453,7 +458,8 @@ void LocationBarView::Layout() {
   selected_keyword_view_->SetVisible(false);
   keyword_hint_view_->SetVisible(false);
 
-  const int edge_padding = GetLayoutConstant(LOCATION_BAR_ELEMENT_PADDING);
+  const int edge_padding =
+      GetLayoutConstant(LOCATION_BAR_ELEMENT_PADDING) + 1 /* WTF */;
 
   // The text should be indented only if these are all true:
   //  - The popup is open.
@@ -497,7 +503,8 @@ void LocationBarView::Layout() {
   // to position our child views in this case, because other things may be
   // positioned relative to them (e.g. the "bookmark added" bubble if the user
   // hits ctrl-d).
-  const int vertical_padding = GetLayoutConstant(LOCATION_BAR_ELEMENT_PADDING);
+  const int vertical_padding = GetLayoutConstant(LOCATION_BAR_ELEMENT_PADDING) +
+                               (MD::eye_protection() ? 1 : 0);
   const int location_height = std::max(height() - (vertical_padding * 2), 0);
   // The largest fraction of the omnibox that can be taken by the EV or search
   // label/chip.
@@ -747,7 +754,11 @@ SkColor LocationBarView::GetBorderColor() const {
 }
 
 gfx::Rect LocationBarView::GetLocalBoundsWithoutEndcaps() const {
-  const int border_radius = height() / 2;
+  const int border_radius =
+      MD::eye_protection()
+          ? gfx::ToCeiledInt(BackgroundWith1PxBorder::kLegacyBorderRadiusPx /
+                             layer()->device_scale_factor())
+          : height() / 2;
   gfx::Rect bounds_without_endcaps(GetLocalBounds());
   bounds_without_endcaps.Inset(border_radius, 0);
   return bounds_without_endcaps;
@@ -778,7 +789,13 @@ void LocationBarView::RefreshBackground() {
       stroke_color = border_color;
     }
 
-    SetBackground(CreateRoundRectBackground(background_color, stroke_color));
+    if (MD::eye_protection() &&
+        !omnibox_view_->model()->popup_model()->IsOpen()) {
+      SetBackground(std::make_unique<BackgroundWith1PxBorder>(
+          background_color, GetBorderColor()));
+    } else {
+      SetBackground(CreateRoundRectBackground(background_color, stroke_color));
+    }
   }
 
   // Keep the views::Textfield in sync. It needs an opaque background to
-- 
2.24.1.windows.2

