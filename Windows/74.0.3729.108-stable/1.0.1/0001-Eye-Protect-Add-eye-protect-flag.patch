From 69d4244c422cbae8a15d59019e59a3814e39a841 Mon Sep 17 00:00:00 2001
From: FENGberd <fengberd@gmail.com>
Date: Tue, 30 Apr 2019 19:42:06 +0800
Subject: [PATCH 1/6] [Eye-Protect] Add eye protect flag

---
 chrome/browser/about_flags.cc                           | 3 +++
 chrome/browser/chromeos/login/chrome_restart_request.cc | 1 +
 chrome/browser/flag-metadata.json                       | 7 +++++++
 chrome/browser/flag_descriptions.cc                     | 4 ++++
 chrome/browser/flag_descriptions.h                      | 3 +++
 ui/base/material_design/material_design_controller.cc   | 3 ++-
 ui/base/material_design/material_design_controller.h    | 4 ++++
 ui/base/ui_base_switches.cc                             | 2 ++
 ui/base/ui_base_switches.h                              | 2 ++
 9 files changed, 28 insertions(+), 1 deletion(-)

diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 4db65beb6d67..adcecafcddb1 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -1329,6 +1329,9 @@ const FeatureEntry kFeatureEntries[] = {
     {"top-chrome-touch-ui", flag_descriptions::kTopChromeTouchUiName,
      flag_descriptions::kTopChromeTouchUiDescription, kOsDesktop,
      MULTI_VALUE_TYPE(kTopChromeTouchUiChoices)},
+    {"eye-protection", flag_descriptions::kEyeProtectionName,
+     flag_descriptions::kEyeProtectionDescription, kOsDesktop,
+     SINGLE_VALUE_TYPE(switches::kEyeProtection)},
     {"new-tab-button-position", flag_descriptions::kNewTabButtonPosition,
      flag_descriptions::kNewTabButtonPositionDescription, kOsDesktop,
      MULTI_VALUE_TYPE(kNewTabButtonPositionChoices)},
diff --git a/chrome/browser/chromeos/login/chrome_restart_request.cc b/chrome/browser/chromeos/login/chrome_restart_request.cc
index b6e836dcf347..f1422678e54b 100644
--- a/chrome/browser/chromeos/login/chrome_restart_request.cc
+++ b/chrome/browser/chromeos/login/chrome_restart_request.cc
@@ -145,6 +145,7 @@ void DeriveCommandLine(const GURL& start_url,
     ::switches::kTouchDevices,
     ::switches::kTouchEventFeatureDetection,
     ::switches::kTopChromeTouchUi,
+    ::switches::kEyeProtection,
     ::switches::kTraceToConsole,
     ::switches::kUIDisablePartialSwap,
 #if defined(USE_CRAS)
diff --git a/chrome/browser/flag-metadata.json b/chrome/browser/flag-metadata.json
index 674ec7b96770..96c61b23a185 100644
--- a/chrome/browser/flag-metadata.json
+++ b/chrome/browser/flag-metadata.json
@@ -3196,4 +3196,11 @@
 
   // This is an alphabetized list; please do your part to keep it organized by
   // inserting your entry in alphabetical order.
+
+  ,
+  { // I dont care cuz this wont be commited to chromium project :/
+    "name": "eye-protection",
+    "owners": [ "fengberd@gmail.com" ],
+    "expiry_milestone": -1
+  }
 ]
diff --git a/chrome/browser/flag_descriptions.cc b/chrome/browser/flag_descriptions.cc
index 4882c0a7e0e5..848d17c9c0c5 100644
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -1907,6 +1907,10 @@ const char kTopChromeTouchUiName[] = "Touch UI Layout";
 const char kTopChromeTouchUiDescription[] =
     "Enables touch UI layout in the browser's top chrome.";
 
+const char kEyeProtectionName[] = "Eye Protection";
+const char kEyeProtectionDescription[] =
+    "Protect your eyes from being hurt by Material Disaster 2";
+
 const char kThreadedScrollingName[] = "Threaded scrolling";
 const char kThreadedScrollingDescription[] =
     "Threaded handling of scroll-related input events. Disabling this will "
diff --git a/chrome/browser/flag_descriptions.h b/chrome/browser/flag_descriptions.h
index 4b9eb272cd21..17b771d29888 100644
--- a/chrome/browser/flag_descriptions.h
+++ b/chrome/browser/flag_descriptions.h
@@ -1127,6 +1127,9 @@ extern const char kTintGlCompositedContentDescription[];
 extern const char kTopChromeTouchUiName[];
 extern const char kTopChromeTouchUiDescription[];
 
+extern const char kEyeProtectionName[];
+extern const char kEyeProtectionDescription[];
+
 extern const char kThreadedScrollingName[];
 extern const char kThreadedScrollingDescription[];
 
diff --git a/ui/base/material_design/material_design_controller.cc b/ui/base/material_design/material_design_controller.cc
index bf0caa691890..b29e77137f97 100644
--- a/ui/base/material_design/material_design_controller.cc
+++ b/ui/base/material_design/material_design_controller.cc
@@ -50,17 +50,18 @@ void TabletModeWatcherWinProc(HWND hwnd,
 }  // namespace
 #endif  // defined(OS_WIN)
 
+bool MaterialDesignController::eye_protection_ = false;
 bool MaterialDesignController::touch_ui_ = false;
 bool MaterialDesignController::automatic_touch_ui_ = false;
 
 // static
 void MaterialDesignController::Initialize() {
   base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  eye_protection_ = command_line->HasSwitch(switches::kEyeProtection);
   const std::string switch_value =
       command_line->GetSwitchValueASCII(switches::kTopChromeTouchUi);
   bool touch = switch_value == switches::kTopChromeTouchUiEnabled;
   automatic_touch_ui_ = switch_value == switches::kTopChromeTouchUiAuto;
-
   // When the mode is not explicitly forced, platforms vary as to the default
   // behavior.
   if (!touch && (switch_value != switches::kTopChromeTouchUiDisabled) &&
diff --git a/ui/base/material_design/material_design_controller.h b/ui/base/material_design/material_design_controller.h
index 1e27b70bcfdb..97a22c492969 100644
--- a/ui/base/material_design/material_design_controller.h
+++ b/ui/base/material_design/material_design_controller.h
@@ -33,6 +33,8 @@ class UI_BASE_EXPORT MaterialDesignController {
   // Initializes touch UI state based on command-line flags.
   static void Initialize();
 
+  static bool eye_protection() { return eye_protection_; }
+
   static bool touch_ui() { return touch_ui_; }
 
   // Exposed for TabletModeClient on ChromeOS + ash.
@@ -56,6 +58,8 @@ class UI_BASE_EXPORT MaterialDesignController {
   // Whether the UI layout should be touch-optimized.
   static bool touch_ui_;
 
+  static bool eye_protection_;
+
   // Whether |touch_ui_| should toggle on and off depending on the tablet state.
   static bool automatic_touch_ui_;
 
diff --git a/ui/base/ui_base_switches.cc b/ui/base/ui_base_switches.cc
index 6317c146817d..6a39405c9744 100644
--- a/ui/base/ui_base_switches.cc
+++ b/ui/base/ui_base_switches.cc
@@ -75,6 +75,8 @@ const char kTopChromeTouchUiAuto[] = "auto";
 const char kTopChromeTouchUiDisabled[] = "disabled";
 const char kTopChromeTouchUiEnabled[] = "enabled";
 
+const char kEyeProtection[] = "eye-protection";
+
 // Disable partial swap which is needed for some OpenGL drivers / emulators.
 const char kUIDisablePartialSwap[] = "ui-disable-partial-swap";
 
diff --git a/ui/base/ui_base_switches.h b/ui/base/ui_base_switches.h
index 16609c63e277..529a60c3c0c6 100644
--- a/ui/base/ui_base_switches.h
+++ b/ui/base/ui_base_switches.h
@@ -42,6 +42,8 @@ UI_BASE_EXPORT extern const char kTopChromeTouchUiDisabled[];
 UI_BASE_EXPORT extern const char kTopChromeTouchUiEnabled[];
 UI_BASE_EXPORT extern const char kUIDisablePartialSwap[];
 
+UI_BASE_EXPORT extern const char kEyeProtection[];
+
 // Test related.
 UI_BASE_EXPORT extern const char kDisallowNonExactResourceReuse[];
 UI_BASE_EXPORT extern const char kMangleLocalizedStrings[];
-- 
2.21.0.windows.1

